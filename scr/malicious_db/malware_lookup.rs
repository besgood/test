// src/malicious_db/malware_lookup.rs

use std::collections::HashMap;
use std::fs;
use serde::{Deserialize, Serialize};
use serde_json;
use log::info;

#[derive(Debug, Serialize, Deserialize)]
pub struct MalwareSignature {
    pub indicator: String,
    pub description: String,
    pub severity: String,
    pub family: Option<String>,
}

pub fn load_signatures_from_file(file_path: &str) -> Vec<MalwareSignature> {
    let content = fs::read_to_string(file_path).expect("Failed to read signature file");
    serde_json::from_str(&content).unwrap_or_default()
}

pub fn lookup_indicator(indicator: &str, signatures: &[MalwareSignature]) -> Option<MalwareSignature> {
    for sig in signatures {
        if indicator.contains(&sig.indicator) {
            return Some(sig.clone());
        }
    }
    None
}

pub fn batch_lookup(indicators: &[String], db_path: &str) -> Vec<MalwareSignature> {
    let signatures = load_signatures_from_file(db_path);
    let mut matches = Vec::new();

    for ind in indicators {
        if let Some(sig) = lookup_indicator(ind, &signatures) {
            info!("Match found for indicator: {}", ind);
            matches.push(sig);
        }
    }
    matches
}
